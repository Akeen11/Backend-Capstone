// <auto-generated />
using System;
using BackendCapstone.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BackendCapstone.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181213214304_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BackendCapstone.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<bool?>("IsVet");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("StreetAddress")
                        .IsRequired();

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "a083bf3e-d2b0-4e9a-90f7-8ff78d81242b", AccessFailedCount = 0, ConcurrencyStamp = "7fdbc61c-0459-462a-9381-2a869ac15547", Email = "admin@admin.com", EmailConfirmed = true, FirstName = "admin", IsVet = true, LastName = "admin", LockoutEnabled = false, NormalizedEmail = "ADMIN@ADMIN.COM", NormalizedUserName = "ADMIN@ADMIN.COM", PasswordHash = "AQAAAAEAACcQAAAAEDXekLaRbjqF7RvQiq4cyPxw+cLYRwiJMcwfTt1M0iX29CwMGDLD4bjwSF1tWTULWQ==", PhoneNumberConfirmed = false, SecurityStamp = "b1805040-7821-428b-9303-6294c66ac57b", StreetAddress = "123 Infinity Way", TwoFactorEnabled = false, UserName = "admin@admin.com" },
                        new { Id = "dc4397a2-758a-43f2-be30-8312c2cee0f6", AccessFailedCount = 0, ConcurrencyStamp = "d846dd43-fb57-482c-ba81-9a0e0c3c53e5", Email = "aaron@aaron.com", EmailConfirmed = true, FirstName = "aaron", LastName = "aaron", LockoutEnabled = false, NormalizedEmail = "AARON@AARON.COM", NormalizedUserName = "AARON@AARON.COM", PasswordHash = "AQAAAAEAACcQAAAAEPUQwqsaAWtTCFl7UoI83tmBrF7ctvYQXXoUvcrpUHGmVGPC17Q8Zc95upDPVZqihQ==", PhoneNumberConfirmed = false, SecurityStamp = "85198351-8b7a-4071-a4a6-fc8f5419a128", StreetAddress = "123 Infinity Way", TwoFactorEnabled = false, UserName = "aaron@aaron.com" }
                    );
                });

            modelBuilder.Entity("BackendCapstone.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Messages")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<string>("VetId")
                        .IsRequired();

                    b.HasKey("MessageId");

                    b.HasIndex("UserId");

                    b.HasIndex("VetId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { MessageId = 1, Messages = "Hi", UserId = "dc4397a2-758a-43f2-be30-8312c2cee0f6", VetId = "a083bf3e-d2b0-4e9a-90f7-8ff78d81242b" },
                        new { MessageId = 2, Messages = "Hello", UserId = "dc4397a2-758a-43f2-be30-8312c2cee0f6", VetId = "a083bf3e-d2b0-4e9a-90f7-8ff78d81242b" },
                        new { MessageId = 3, Messages = "How are you", UserId = "dc4397a2-758a-43f2-be30-8312c2cee0f6", VetId = "a083bf3e-d2b0-4e9a-90f7-8ff78d81242b" },
                        new { MessageId = 4, Messages = "I'm good", UserId = "dc4397a2-758a-43f2-be30-8312c2cee0f6", VetId = "a083bf3e-d2b0-4e9a-90f7-8ff78d81242b" }
                    );
                });

            modelBuilder.Entity("BackendCapstone.Models.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<string>("VetId")
                        .IsRequired();

                    b.HasKey("NoteId");

                    b.HasIndex("UserId");

                    b.HasIndex("VetId");

                    b.ToTable("Notes");

                    b.HasData(
                        new { NoteId = 1, Message = "Get shots", UserId = "dc4397a2-758a-43f2-be30-8312c2cee0f6", VetId = "a083bf3e-d2b0-4e9a-90f7-8ff78d81242b" },
                        new { NoteId = 2, Message = "Happy pupper", UserId = "dc4397a2-758a-43f2-be30-8312c2cee0f6", VetId = "a083bf3e-d2b0-4e9a-90f7-8ff78d81242b" }
                    );
                });

            modelBuilder.Entity("BackendCapstone.Models.Pet", b =>
                {
                    b.Property<int>("PetId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<string>("ImagePath");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<string>("VetId")
                        .IsRequired();

                    b.HasKey("PetId");

                    b.HasIndex("UserId");

                    b.HasIndex("VetId");

                    b.ToTable("Pets");

                    b.HasData(
                        new { PetId = 1, Age = 1, Name = "Gunner", Status = "Healthy", UserId = "dc4397a2-758a-43f2-be30-8312c2cee0f6", VetId = "a083bf3e-d2b0-4e9a-90f7-8ff78d81242b" },
                        new { PetId = 2, Age = 1, Name = "Marley", Status = "Sick", UserId = "dc4397a2-758a-43f2-be30-8312c2cee0f6", VetId = "a083bf3e-d2b0-4e9a-90f7-8ff78d81242b" },
                        new { PetId = 3, Age = 1, Name = "Whitley", Status = "Beat up", UserId = "dc4397a2-758a-43f2-be30-8312c2cee0f6", VetId = "a083bf3e-d2b0-4e9a-90f7-8ff78d81242b" },
                        new { PetId = 4, Age = 1, Name = "Rocky", Status = "Healthy", UserId = "dc4397a2-758a-43f2-be30-8312c2cee0f6", VetId = "a083bf3e-d2b0-4e9a-90f7-8ff78d81242b" }
                    );
                });

            modelBuilder.Entity("BackendCapstone.Models.PetTreatment", b =>
                {
                    b.Property<int>("PetTreatmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PetId");

                    b.Property<int>("TreatmentId");

                    b.HasKey("PetTreatmentId");

                    b.HasIndex("PetId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("PetTreatments");

                    b.HasData(
                        new { PetTreatmentId = 1, PetId = 1, TreatmentId = 1 },
                        new { PetTreatmentId = 2, PetId = 2, TreatmentId = 2 }
                    );
                });

            modelBuilder.Entity("BackendCapstone.Models.Treatment", b =>
                {
                    b.Property<int>("TreatmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.HasKey("TreatmentId");

                    b.ToTable("Treatments");

                    b.HasData(
                        new { TreatmentId = 1, Description = "Attacks the lining of the intestinal tract and damages the heart of very young puppies; disease can be fatal", Name = "Parvovirus Vaccine", Price = 20.0 },
                        new { TreatmentId = 2, Description = "Attacks the lungs and affects the function of the brain and spinal cord; disease can be fatal", Name = "Canine Distemper Virus Vaccine", Price = 20.0 },
                        new { TreatmentId = 3, Description = "Affects the liver and can cause loss of vision", Name = "Canine adenovirus", Price = 15.0 },
                        new { TreatmentId = 4, Description = "This is a fatal viral disease that can infect all warm-blooded animals, including dogs and humans", Name = "Rabies", Price = 20.0 }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BackendCapstone.Models.Message", b =>
                {
                    b.HasOne("BackendCapstone.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BackendCapstone.Models.ApplicationUser", "Vet")
                        .WithMany()
                        .HasForeignKey("VetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BackendCapstone.Models.Note", b =>
                {
                    b.HasOne("BackendCapstone.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BackendCapstone.Models.ApplicationUser", "Vet")
                        .WithMany()
                        .HasForeignKey("VetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BackendCapstone.Models.Pet", b =>
                {
                    b.HasOne("BackendCapstone.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BackendCapstone.Models.ApplicationUser", "Vet")
                        .WithMany()
                        .HasForeignKey("VetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BackendCapstone.Models.PetTreatment", b =>
                {
                    b.HasOne("BackendCapstone.Models.Pet", "Pet")
                        .WithMany("PetTreatments")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BackendCapstone.Models.Treatment", "Treatment")
                        .WithMany("PetTreatments")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BackendCapstone.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BackendCapstone.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BackendCapstone.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BackendCapstone.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
